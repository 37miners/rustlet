initSidebarItems({"enum":[["BulkAlgorithm","Bulk symmetric encryption scheme used by a cipher suite."],["CipherSuite","The `CipherSuite` TLS protocol enum.  Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals."],["Error","rustls reports protocol errors using this type."],["ProtocolVersion","The `ProtocolVersion` TLS protocol enum.  Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals."],["ServerName","Encodes ways a client can know the expected name of the server."],["SignatureScheme","The `SignatureScheme` TLS protocol enum.  Values in this enum are taken from the various RFCs covering TLS, and are listed by IANA. The `Unknown` item is used when processing unrecognised ordinals."],["SupportedCipherSuite","A cipher suite supported by rustls."],["WebPkiError","Reasons for a WebPKI operation to fail, used in [`Error`]."],["WebPkiOp","Which WebPKI operation was performed, used in [`Error`]."]],"mod":[["cipher_suite","All defined ciphersuites appear in this module."],["internal","Internal classes which may be useful outside the library. The contents of this section DO NOT form part of the stable interface."],["kx_group","All defined key exchange groups appear in this module."],["manual","This is the rustls manual. This documentation primarily aims to explain design decisions taken in rustls."],["sign","Message signing interfaces and implementations."],["version","All defined protocol versions appear in this module."]],"static":[["ALL_CIPHERSUITES","A list of all the cipher suites supported by rustls."],["ALL_KX_GROUPS","A list of all the key exchange groups supported by rustls."],["ALL_VERSIONS","A list of all the protocol versions supported by rustls."],["DEFAULT_CIPHERSUITES","The cipher suite configuration that an application should use by default."],["DEFAULT_VERSIONS","The version configuration that an application should use by default."]],"struct":[["AllowAnyAnonymousOrAuthenticatedClient","A `ClientCertVerifier` that will allow both anonymous and authenticated clients, without any name checking."],["AllowAnyAuthenticatedClient","A `ClientCertVerifier` that will ensure that every client provides a trusted certificate, without any name checking."],["Certificate","This type contains a single certificate by value."],["ClientConfig","Common configuration for (typically) all connections made by a program."],["ClientConnection","This represents a single TLS client connection."],["ClientHello","A struct representing the received Client Hello"],["ClientSessionMemoryCache","An implementer of `StoresClientSessions` that stores everything in memory.  It enforces a limit on the number of entries to bound memory usage."],["ConfigBuilder","Building a `ServerConfig` or `ClientConfig` in a linker-friendly and complete way."],["KeyLogFile","`KeyLog` implementation that opens a file whose name is given by the `SSLKEYLOGFILE` environment variable, and writes keys into it."],["NoClientAuth","Turns off client authentication."],["NoClientSessionStorage","An implementer of `StoresClientSessions` which does nothing."],["NoKeyLog","KeyLog that does exactly nothing."],["NoServerSessionStorage","Something which never stores sessions."],["OwnedTrustAnchor","This is like a `webpki::TrustAnchor`, except it owns rather than borrows its memory.  That prevents lifetimes leaking up the object tree."],["PrivateKey","This type contains a private key by value."],["Reader","A structure that implements [`std::io::Read`] for reading plaintext."],["ResolvesServerCertUsingSni","Something that resolves do different cert chains/keys based on client-supplied server name (via SNI)."],["RootCertStore","A container for root certificates able to provide a root-of-trust for connection authentication."],["ServerConfig","Common configuration for a set of server sessions."],["ServerConnection","This represents a single TLS server connection."],["ServerSessionMemoryCache","An implementer of `StoresServerSessions` that stores everything in memory.  If enforces a limit on the number of stored sessions to bound memory usage."],["Stream","This type implements `io::Read` and `io::Write`, encapsulating a Connection `C` and an underlying transport `T`, such as a socket."],["StreamOwned","This type implements `io::Read` and `io::Write`, encapsulating and owning a Connection `C` and an underlying blocking transport `T`, such as a socket."],["SupportedKxGroup","A key-exchange group supported by rustls."],["SupportedProtocolVersion","A TLS protocl version supported by rustls."],["Ticketer","A concrete, safe ticket creation mechanism."],["Tls12CipherSuite","A TLS 1.2 cipher suite supported by rustls."],["Tls13CipherSuite","A TLS 1.3 cipher suite supported by rustls."],["WantsCipherSuites","Config builder state where the caller must supply cipher suites."],["WantsClientCert","A config builder state where the caller needs to supply whether and how to provide a client certificate."],["WantsKxGroups","Config builder state where the caller must supply key exchange groups."],["WantsServerCert","A config builder state where the caller must supply how to provide a server certificate to the connecting peer."],["WantsVerifier","Config builder state where the caller must supply a verifier."],["WantsVersions","Config builder state where the caller must supply TLS protocol versions."],["WriteEarlyData","Stub that implements io::Write and dispatches to `write_early_data`."],["Writer","A structure that implements [`std::io::Write`] for writing plaintext."]],"trait":[["ConfigSide","Helper trait to abstract [`ConfigBuilder`] over building a `ClientConfig` or `ServerConfig`."],["Connection","Generalises `ClientConnection` and `ServerConnection`"],["KeyLog","This trait represents the ability to do something useful with key material, such as logging it to a file for debugging."],["ProducesTickets","A trait for the ability to encrypt and decrypt tickets."],["ResolvesClientCert","A trait for the ability to choose a certificate chain and private key for the purposes of client authentication."],["ResolvesServerCert","How to choose a certificate chain and signing key for use in server authentication."],["StoresClientSessions","A trait for the ability to store client session data. The keys and values are opaque."],["StoresServerSessions","A trait for the ability to store server session data."]],"type":[["DistinguishedNames",""]]});